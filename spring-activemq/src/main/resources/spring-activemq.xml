<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  <!--生产者和消费者都需要用到的-start-->
  <!--配置包扫描路径-->
  <context:component-scan base-package="com.caihao.activemqdemo.producer"/>
  <context:component-scan base-package="com.caihao.activemqdemo.consumer"/>

  <!--ActiveMQ为我们提供的ConnectionFactory-->
  <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616"/>
  </bean>
  <!--spring jms 为我们提供的连接池，这个connectionFactory也是下面的jmsTemplate要使用的，
  它其实就是对activeMQ的ConnectionFactory的一个封装-->
  <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
    <property name="targetConnectionFactory" ref="targetConnectionFactory"/>
  </bean>

  <!--提供一个队列模式的目的地，点对点的-->
  <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
    <!--目的地队列的名字-->
    <constructor-arg value="queue-demo"/>
  </bean>

  <!--提供一个topic模式的目的地，广播的-->
  <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
    <!--topic模式名称-->
    <constructor-arg value="topic-demo"/>
  </bean>
  <!--生产者和消费者都需要用到的-end-->

  <!--生产者所需要的-start-->
  <!--配置jmsTemplate用于发送消息-->
  <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    <property name="connectionFactory" ref="connectionFactory"/>
  </bean>
  <!--生产者所需要的-end-->

  <!--消费者所需要的start-->

  <!--配置消息监听器1，即消息的消费者-->
  <bean id="queueListener1" class="com.caihao.activemqdemo.consumer.QueueListener1"/>
  <!--配置消息容器1-->
  <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <!--指定连接工厂-->
    <property name="connectionFactory" ref="connectionFactory"/>
    <!--指定消息目的地-->
    <property name="destination" ref="queueDestination"/>
    <!--指定消息监听器-->
    <property name="messageListener" ref="queueListener1"/>
  </bean>
  <!--配置消息监听器2，即消息的消费者-->
  <bean id="queueListener2" class="com.caihao.activemqdemo.consumer.QueueListener2"/>
  <!--配置消息容器2-->
  <bean id="jmsContainer2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <!--指定连接工厂-->
    <property name="connectionFactory" ref="connectionFactory"/>
    <!--指定消息目的地-->
    <property name="destination" ref="queueDestination"/>
    <!--指定消息监听器-->
    <property name="messageListener" ref="queueListener2"/>
  </bean>

  <!--topic模式监听器-->
  <!--配置消息监听器1，即消息的消费者-->
  <bean id="topicListener1" class="com.caihao.activemqdemo.consumer.TopicListener1"/>
  <!--配置消息容器1-->
  <bean id="topicContainer1" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <!--指定连接工厂-->
    <property name="connectionFactory" ref="connectionFactory"/>
    <!--指定消息目的地-->
    <property name="destination" ref="topicDestination"/>
    <!--指定消息监听器-->
    <property name="messageListener" ref="topicListener1"/>
  </bean>
  <!--配置消息监听器2，即消息的消费者-->
  <bean id="topicListener2" class="com.caihao.activemqdemo.consumer.TopicListener2"/>
  <!--配置消息容器1-->
  <bean id="topicContainer2" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <!--指定连接工厂-->
    <property name="connectionFactory" ref="connectionFactory"/>
    <!--指定消息目的地-->
    <property name="destination" ref="topicDestination"/>
    <!--指定消息监听器-->
    <property name="messageListener" ref="topicListener2"/>
  </bean>
  <!--消费者所需要的end-->

</beans>
